@implements IDisposable
@if(allState.ShowEmployee) {
    if(ShowAddOrUpdateEmployee) {
        <div class="container">
            <div class="row mt-5">
                <div class="col-lg-1 text-center">
                    <i class="bi bi-x-lg fs-3 fw-bold text-danger" style="cursor:pointer;" @onclick="CloseForm"></i>
                </div>
                <div class="col-lg-6 text-center"><h2>@Title Employee</h2></div>
            </div>

            <div class="row">
                <div class="col-lg-12 mt-2 mb-5 d-flex justify-content-center">
                    <div class="hstack">
                        @if(FirstLayer){
                            <div class="@FloatingNumber1 text-center">1</div>
                            <div class="@FloatingDiv1 format-border"></div>
                            <div class="@FloatingNumber2 text-center">2</div>
                            <div class="@FloatingDiv2 format-border"></div>
                        }
                        @if (SecondLayer)
                        {
                            <div class="@FloatingNumber1 text-center">1</div>
                            <div class="@FloatingDiv1 format-border"></div>
                            <div class="@FloatingNumber1 text-center">2</div>
                            <div class="@FloatingDiv1 format-border"></div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="col-lg-12">
            <div class="container-fluid">
                @if(FirstLayer) {
                    <EditForm Enhance Model="EmployeeGroup1" OnValidSubmit="Form1">
                        <DataAnnotationsValidator/>
                        <div class="row">
                            <div class="col-lg-2"></div>
                            <div class="col-lg-4">
                                <div class="card-title mb-5 fw-bold" style="font-family:Tahoma">Personal Information</div>
                                <div class="card-body">
                                    <div class="form-group">
                                        <label class="form-label">Fullname</label>
                                        <InputText @bind-Value="EmployeeGroup1.Name" class="form-control"/>
                                        <ValidationMessage For="() => EmployeeGroup1.Name" class="text-danger" />
                                    </div>
                                    <div class="form-group mt-2">
                                        <label class="form-label">Telephone</label>
                                        <InputText @bind-Value="EmployeeGroup1.TelephoneNumber" class="form-control" />
                                        <ValidationMessage For="() => EmployeeGroup1.TelephoneNumber" class="text-danger" />
                                    </div>
                                    <div class="form-group mt-2">
                                        <label class="form-label">Address</label>
                                        <InputTextArea @bind-Value="EmployeeGroup1.Address" class="form-control" />
                                        <ValidationMessage For="() => EmployeeGroup1.Address" class="text-danger" />
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-4 mt-2">
                                <div class="card-title mb-5 fw-bold" style="font-family:Tahoma">Other Information</div>
                                <div class="card-body">
                                    <div class="form-group">
                                        <label class="form-label">Civil Id</label>
                                        <InputText @bind-Value="EmployeeGroup1.CivilId" class="form-control" />
                                        <ValidationMessage For="() => EmployeeGroup1.CivilId" class="text-danger" />
                                    </div>
                                    <div class="form-group mt-2">
                                        <label class="form-label">File Number</label>
                                        <InputText @bind-Value="EmployeeGroup1.FileNumber" class="form-control" />
                                        <ValidationMessage For="() => EmployeeGroup1.FileNumber" class="text-danger" />
                                    </div>
                                    <div class="form-group mt-3">
                                        <label class="form-label @(ImageUploadMessage == "" ? "" : "text-danger")">
                                            @(ImageUploadMessage == "" ? "Upload Image" : ImageUploadMessage)
                                        </label>
                                        <InputFile class="form-control" OnChange="UploadImage"></InputFile>
                                        <ValidationMessage For="() => EmployeeGroup1.Photo" class="text-danger" />
                                    </div>
                                    <div class="form-control mt-2">
                                        <img src="@EmployeeGroup1.Photo" width="100" height="100" />
                                    </div>
                                    <div class="form-group mt-5">
                                        <button class="btn btn-primary float-end mt-4 mb-5" type="submit">
                                            <i class="bi bi-arrow-right"></i>
                                            Next
                                        </button>
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-2"></div>
                        </div>
                    </EditForm>
                } @if(SecondLayer) {
                    <EditForm Enhance Model="EmployeeGroup2" OnValidSubmit="Form2">
                        <DataAnnotationsValidator />
                        <div class="row">
                            <div class="col-lg-2"></div>
                            <div class="col-lg-4">
                                <div class="card-title mb-5 fw-bold" style="font-family:Tahoma">Job Information</div>
                                <div class="card-body">
                                    <div class="form-group mt-2">
                                        <label class="form-label">Job Name</label>
                                        <InputText @bind-Value="EmployeeGroup2.JobName" class="form-control" />
                                        <ValidationMessage For="() => EmployeeGroup2.JobName" class="text-danger" />
                                    </div>
                                    <div class="form-group mt-3">
                                        @{
                                            var generalDepartment = GeneralDepartmentName.Equals("") ? "Select General Department" : GeneralDepartmentName;
                                        }
                                        <SfDropDownList TValue="string" TItem="GeneralDepartment" Placeholder="@generalDepartment" DataSource="GeneralDepartments">
                                            <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                            <DropDownListEvents TValue="string" TItem="GeneralDepartment" ValueChange="OnGeneralDepartmentValueChange"></DropDownListEvents>
                                        </SfDropDownList>
                                    </div>
                                    <div class="form-group mt-3">
                                        @{
                                            var departmentName = DepartmentName.Equals("") ? "Select Department" : DepartmentName;
                                        }
                                        <SfDropDownList TValue="string" TItem="Department" Placeholder="@departmentName" DataSource="Departments">
                                            <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                            <DropDownListEvents TValue="string" TItem="Department" ValueChange="OnDepartmentValueChange"></DropDownListEvents>
                                        </SfDropDownList>
                                    </div>
                                    <div class="form-group mt-3">
                                        @{
                                            var branchName = BranchName.Equals("") ? "Select Branch" : BranchName;
                                        }
                                        <SfDropDownList TValue="string" TItem="Branch" Placeholder="@branchName" DataSource="Branches">
                                            <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                            <DropDownListEvents TValue="string" TItem="Branch" ValueChange="OnBranchValueChange"></DropDownListEvents>
                                        </SfDropDownList>
                                        <ValidationMessage For="() => EmployeeGroup2.BranchId" class="text-danger" />
                                    </div>
                                    <div class="form-group mt-5">
                                        <button class="btn btn-primary float-start mt-4 mb-5" type="button" @onclick="PrevClicked">
                                            <i class="bi bi-arrow-left"></i>
                                            Previous
                                        </button>
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-4 mt-2">
                                <div class="card-title mb-5 fw-bold" style="font-family:Tahoma">Location Information</div>
                                <div class="card-body">
                                    <div class="form-group mt-3">
                                        @{
                                            var countryName = CountryName.Equals("") ? "Select Country" : CountryName;
                                        }
                                        <SfDropDownList TValue="string" TItem="Country" Placeholder="@countryName" DataSource="Countries">
                                            <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                            <DropDownListEvents TValue="string" TItem="Country" ValueChange="OnCountryValueChange"></DropDownListEvents>
                                        </SfDropDownList>
                                    </div>
                                    <div class="form-group mt-3">
                                        @{
                                            var cityName = CityName.Equals("") ? "Select City" : CityName;
                                        }
                                        <SfDropDownList TValue="string" TItem="City" Placeholder="@cityName" DataSource="Cities">
                                            <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                            <DropDownListEvents TValue="string" TItem="City" ValueChange="OnCityValueChange"></DropDownListEvents>
                                        </SfDropDownList>
                                    </div>
                                    <div class="form-group mt-3">
                                        @{
                                            var townName = TownName.Equals("") ? "Select Town" : TownName;
                                        }
                                        <SfDropDownList TValue="string" TItem="Town" Placeholder="@townName" DataSource="Towns">
                                            <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                            <DropDownListEvents TValue="string" TItem="Town" ValueChange="OnTownValueChange"></DropDownListEvents>
                                        </SfDropDownList>
                                        <ValidationMessage For="() => EmployeeGroup2.TownId" class="text-danger" />
                                    </div>
                                    <div class="form-group mt-3">
                                        <label class="form-label">Other</label>
                                        <textarea @bind="EmployeeGroup2.Other" placeholder="Optional" class="form-control" />
                                    </div>
                                    <div class="form-group mt-5">
                                        <button class="btn btn-success float-end mt-4 mb-5" type="submit">
                                            <i class="bi bi-save"></i>
                                            Save
                                        </button>
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-2"></div>
                        </div>
                    </EditForm>
                }
            </div>
        </div>
    }
}

<style>
    .floatingDiv {
    width: 500px;
    height: 10px;
    background: #228ada;
    }

    .floatingNumber {
    border-radius: 50%;
    color: white;
    background: #1d1858;
    width: 20px;
    height: 20px;
    }

    .inactive-div {
    width: 500px;
    height: 10px;
    background: gray;
    }

    .inactive-span {
    border-radius: 50%;
    color: white;
    background: gray;
    width: 20px;
    height: 20px;
    }

    .format-border {
    border-radius: 20px;
    }
</style>

@code {
    [Parameter] public Employee Employee { get; set; } = new();
    [Parameter] public bool ShowAddOrUpdateEmployee { get; set; }
    [Parameter] public EmployeeGrouping1 EmployeeGroup1 { get; set; } = new();
    [Parameter] public EmployeeGrouping2 EmployeeGroup2 { get; set; } = new();

    [Parameter] public List<Country> Countries { get; set; } = new();
    [Parameter] public List<City> Cities { get; set; } = new();
    [Parameter] public List<Town> Towns { get; set; } = new();

    [Parameter] public List<Department> Departments { get; set; } = new();
    [Parameter] public List<GeneralDepartment> GeneralDepartments { get; set; } = new();
    [Parameter] public List<Branch> Branches { get; set; } = new();

    string FloatingNumber1 = "floatingNumber";
    string FloatingDiv1 = "floatingDiv";

    string FloatingNumber2 = "inactive-span";
    string FloatingDiv2 = "inactive-div";

    public bool FirstLayer { get; set; } = true;
    public bool SecondLayer { get; set; } = false;
    public string Title { get; set; } = "Add";
    public string GeneralDepartmentName { get; set; } = "";
    public string DepartmentName { get; set; } = "";
    public string BranchName { get; set; } = "";
    public string CountryName { get; set; } = "";
    public string CityName { get; set; } = "";
    public string TownName { get; set; } = "";

    private void PrevClicked() {
        FirstLayer = true;
        SecondLayer = false;
    }

    private void ShowLayer2()
    {
        FirstLayer = false;
        SecondLayer = true;
    }

    string ImageUploadMessage = "";
    private async Task UploadImage(InputFileChangeEventArgs e) {
        if(e.File.Name.ToLower().Contains(".png")) {
            string format = "image/png";
            var resizeImage = await e.File.RequestImageFileAsync(format, 300, 300);
            byte[] buffer = new byte[resizeImage.Size];
            string imageData = $"data:{format};base64;{Convert.ToBase64String(buffer)}";
            ImageUploadMessage = "";
            EmployeeGroup1.Photo = imageData;
            imageData = "";
            return;
        }

        ImageUploadMessage = "PNG file needed.";
        return;
    }

    private bool ValidateEmployeeGroup1() {
        if (string.IsNullOrEmpty(EmployeeGroup1.Name)
        || string.IsNullOrEmpty(EmployeeGroup1.TelephoneNumber)
        || string.IsNullOrEmpty(EmployeeGroup1.FileNumber)
        || string.IsNullOrEmpty(EmployeeGroup1.Address)
        || string.IsNullOrEmpty(EmployeeGroup1.Photo)
        || string.IsNullOrEmpty(EmployeeGroup1.CivilId)
        )
            return false;
        else
            return true;
    }

    private bool ValidateEmployeeGroup2()
    {
        if (string.IsNullOrEmpty(EmployeeGroup2.JobName)
        || EmployeeGroup2.TownId == 0
        || EmployeeGroup2.BranchId == 0
        )
            return false;
        else
            return true;
    }

    [Parameter] public EventCallback<Employee> HandleSaveEmployeeClickedEvent { get; set; }
    void Form1()
    {
        var isValid = ValidateEmployeeGroup1();
        if (isValid){
            Employee.Name = EmployeeGroup1.Name;
            Employee.TelephoneNumber = EmployeeGroup1.TelephoneNumber;
            Employee.FileNumber = EmployeeGroup1.FileNumber;
            Employee.Address = EmployeeGroup1.Address;
            Employee.Photo = EmployeeGroup1.Photo;
            Employee.CivilId = EmployeeGroup1.CivilId;

            ShowLayer2();
        }
    }

    private async Task Form2()
    {
        var isValid = ValidateEmployeeGroup2();
        if (isValid) {
            Employee.JobName = EmployeeGroup2.JobName;
            Employee.TownId = EmployeeGroup2.TownId;
            Employee.BranchId = EmployeeGroup2.BranchId;

            await HandleSaveEmployeeClickedEvent.InvokeAsync(Employee);
            ClearContent();
        }
    }

    public void ClearContent() {
        EmployeeGroup1 = new();
        EmployeeGroup2 = new();
        Employee = new();
        StateHasChanged();
    }

    protected override void OnInitialized() => allState.Action += StateHasChanged;

    [Parameter] public EventCallback NotifyParentFormCloseClicked { get; set; }
    async Task CloseForm() {
        ShowAddOrUpdateEmployee = false;
        await NotifyParentFormCloseClicked.InvokeAsync();
    }

    [Parameter] public EventCallback<int> HandleCountrySelectedEvent { get; set; }
    public void OnCountryValueChange(ChangeEventArgs<string, Country> args) 
        => HandleCountrySelectedEvent.InvokeAsync(int.Parse(args.Value));

    [Parameter] public EventCallback<int> HandleCitySelectedEvent { get; set; }
    public void OnCityValueChange(ChangeEventArgs<string, City> args)
        => HandleCitySelectedEvent.InvokeAsync(int.Parse(args.Value));

    public void OnTownValueChange(ChangeEventArgs<string, Town> args)
        => EmployeeGroup2.TownId = int.Parse(args.Value);

    [Parameter] public EventCallback<int> HandleGeneralDepartmentSelectedEvent { get; set; }
    public void OnGeneralDepartmentValueChange(ChangeEventArgs<string, GeneralDepartment> args)
        => HandleGeneralDepartmentSelectedEvent.InvokeAsync(int.Parse(args.Value));

    [Parameter] public EventCallback<int> HandleDepartmentSelectedEvent { get; set; }
    public void OnDepartmentValueChange(ChangeEventArgs<string, Department> args)
        => HandleDepartmentSelectedEvent.InvokeAsync(int.Parse(args.Value));

    public void OnBranchValueChange(ChangeEventArgs<string, Branch> args)
        => EmployeeGroup2.BranchId = int.Parse(args.Value);

    public void Dispose() => allState.Action -= StateHasChanged;
}
