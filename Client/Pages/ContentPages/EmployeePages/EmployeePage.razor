@implements IDisposable
@if(allState.ShowEmployee) {
    if(ShowMainPage) {
        <div class="container-fluid mt-5">
            <div class="row">
                <div class="col-lg-12">
                    <div class="card">
                        <div class="card-header">
                            <button class="btn btn-outline-success" @onclick="ShowAddOrUpdateEmployeeButtonClicked">
                                <i class="bi bi-plus-circle-dotted"></i> Add Employee
                            </button>
                        </div>
                        <div class="card-body">
                            <SfGrid DataSource="@Employees">
                                <GridColumns>
                                    <GridColumn HeaderText="Employee Image">
                                        <Template>
                                            @{
                                                var employee = (context as Employee);
                                                <div class="image">
                                                    <img src="@employee!.Photo" alt="@employee.Name" width="150" height="150"/>
                                                </div>
                                            }
                                        </Template>
                                    </GridColumn>
                                    <GridColumn Field=@nameof(Employee.CivilId) HeaderText="Civil ID"></GridColumn>
                                    <GridColumn Field=@nameof(Employee.FileNumber) HeaderText="File Number"></GridColumn>
                                    <GridColumn Field=@nameof(Employee.Name) HeaderText="Name"></GridColumn>
                                    <GridColumn Field=@nameof(Employee.TelephoneNumber) HeaderText="Telephone"></GridColumn>
                                    <GridColumn Field=@nameof(Employee.JobName) HeaderText="Job Name"></GridColumn>
                                    <GridColumn Field=@nameof(Employee.Branch.Name) HeaderText="Branch"></GridColumn>
                                    <GridColumn Field=@nameof(Employee.Town.Name) HeaderText="Town"></GridColumn>
                                    <GridColumn HeaderText="Menu" HeaderTextAlign="TextAlign.Left">
                                        <Template>
                                            @{
                                                var employee = (context as Employee);
                                                <i class="bi bi-menu-down text-primary" id="cursorStyle" onclick="()=>ShowMenuPopUp(employee!)"></i>
                                            }
                                        </Template>
                                    </GridColumn>
                                </GridColumns>
                            </SfGrid>
                        </div>
                        <div class="card-footer"></div>
                    </div>
                </div>
            </div>
        </div>
    }
}

<AddOrUpdateEmployeePage    @ref="addOrUpdateEmployee"
Employee="Employee"
ShowAddOrUpdateEmployee="ShowAddOrUpdatePage"
NotifyParentFormCloseClicked="NotifyParentFormCloseClicked"
Countries="DefaultCountries"
Cities="SelectedCities"
Towns="SelectedTowns"
GeneralDepartments="DefaultGeneralDepartments"
Departments="SelectedDepartments"
Branches="SelectedBranches"
HandleCountrySelectedEvent="HandleCountrySelectEvent"
HandleCitySelectedEvent="HandleCitySelectEvent"
HandleGeneralDepartmentSelectedEvent="HandleGeneralDepartmentSelectEvent"
HandleDepartmentSelectedEvent="HandleDepartmentSelectEvent"
HandleSaveEmployeeClickedEvent="HandleSaveEmployeeClickedEvent">
</AddOrUpdateEmployeePage>

@* <ContextMenu    @ref="contextMenu"
                HandleViewClicked="ViewClicked"
                HandleEditClicked="EditClicekd"
                HandleDeleteClicked="DeleteClicked"
                HandleAddVacationClicked="AddVacationClicked"
                HandleAddHealthClicked="AddHealthClicked"
                HandleAddOvertimeClicked="AddOvertimeClicked"
                HandleAddSanctionClicked="AddSanctionClicked">
</ContextMenu> *@

@code {
    AddOrUpdateEmployeePage? addOrUpdateEmployee;
    public Employee Employee { get; set; } = new();
    public List<Employee> Employees { get; set; } = [];

    public List<Country> DefaultCountries { get; set; } = [];
    public List<City> DefaultCities { get; set; } = [];
    public List<Town> DefaultTowns { get; set; } = [];

    public List<GeneralDepartment> DefaultGeneralDepartments { get; set; } = [];
    public List<Department> DefaultDepartments { get; set; } = [];
    public List<Branch> DefaultBranches { get; set; } = [];

    public List<City> SelectedCities { get; set; } = [];
    public List<Town> SelectedTowns { get; set; } = [];
    public List<Department> SelectedDepartments { get; set; } = [];
    public List<Branch> SelectedBranches { get; set; } = [];

    protected async override Task OnInitializedAsync() {
        allState.Action += StateHasChanged;
        await LoadEmployees();
        await LoadDefaults();
    }

    private async Task LoadDefaults() {
        DefaultCountries = await countryService.GetAll(Constants.CountryBaseUrl);
        DefaultCities = await cityService.GetAll(Constants.CityBaseUrl);
        DefaultTowns = await townService.GetAll(Constants.TownBaseUrl);

        DefaultGeneralDepartments = await generalDepartmentService.GetAll(Constants.GeneralDepartmentBaseUrl);
        DefaultDepartments = await departmentService.GetAll(Constants.DepartmentBaseUrl);
        DefaultBranches = await branchService.GetAll(Constants.BranchBaseUrl);
    }

    public void HandleCountrySelectEvent(int countryId)
        => SelectedCities = DefaultCities.Where(c => c.CountryId == countryId).ToList();

    public void HandleCitySelectEvent(int cityId)
        => SelectedTowns = DefaultTowns.Where(t => t.CityId == cityId).ToList();

    public void HandleGeneralDepartmentSelectEvent(int generalDepartmentId)
        => SelectedDepartments = DefaultDepartments.Where(d => d.GeneralDepartmentId == generalDepartmentId).ToList();

    public void HandleDepartmentSelectEvent(int departmentId)
        => SelectedBranches = DefaultBranches.Where(b => b.DepartmentId == departmentId).ToList();

    private async Task LoadEmployees() => Employees = await employeeService.GetAll(Constants.EmployeeBaseUrl);

    async Task HandleSaveEmployeeClickedEvent(Employee employee) {
        bool successCheck = false;
        if(employee.Id > 0) {
            var result = await employeeService.Update(employee, Constants.EmployeeBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        } else {
            var response = await employeeService.Insert(employee, Constants.EmployeeBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }

        if (successCheck) {
            addOrUpdateEmployee!.ClearContent();
            await NotifyParentFormCloseClicked();
        }
    }

    public bool ShowMainPage { get; set; } = true;
    public bool ShowAddOrUpdatePage { get; set; } = false;
    void ShowAddOrUpdateEmployeeButtonClicked() {
        ShowMainPage = false;
        ShowAddOrUpdatePage = true;
    }

    private async Task NotifyParentFormCloseClicked() {
        ShowMainPage = true;
        ShowAddOrUpdatePage = false;
        await LoadEmployees();
    }

    ContextMenu? contextMenu;
    public Employee SelectedEmployee { get; set; } = new();
    void ShowMenuPopUp(Employee employee) {
        SelectedEmployee = employee;
        contextMenu!.OpenContextMenu();
    }

    void EditClicked() {
        addOrUpdateEmployee!.Employee.Id = SelectedEmployee.Id;

        addOrUpdateEmployee!.EmployeeGroup1.Name = SelectedEmployee.Name;
        addOrUpdateEmployee!.EmployeeGroup1.TelephoneNumber = SelectedEmployee.TelephoneNumber;
        addOrUpdateEmployee!.EmployeeGroup1.FileNumber = SelectedEmployee.FileNumber;
        addOrUpdateEmployee!.EmployeeGroup1.Address = SelectedEmployee.Address;
        addOrUpdateEmployee!.EmployeeGroup1.Photo = SelectedEmployee.Photo ?? "";
        addOrUpdateEmployee!.EmployeeGroup1.CivilId = SelectedEmployee.CivilId;

        addOrUpdateEmployee!.EmployeeGroup2.JobName = SelectedEmployee.JobName;
        addOrUpdateEmployee!.EmployeeGroup2.Other = SelectedEmployee.Other ?? "";

        addOrUpdateEmployee!.GeneralDepartmentName = SelectedEmployee.Branch!.Department!.GeneralDepartment!.Name;
        addOrUpdateEmployee!.DepartmentName = SelectedEmployee.Branch!.Department!.Name;
        addOrUpdateEmployee!.BranchName = SelectedEmployee.Branch!.Name;

        addOrUpdateEmployee!.CountryName = SelectedEmployee.Town!.City!.Country!.Name;
        addOrUpdateEmployee!.CityName = SelectedEmployee.Town!.City!.Name;
        addOrUpdateEmployee!.TownName = SelectedEmployee.Town!.Name;

        addOrUpdateEmployee.Title = "Update";
        SelectedEmployee = new();
        contextMenu!.CloseContextMenu();
        ShowAddOrUpdatePage = true;
        ShowMainPage = false;
    }

    private async Task DeleteClicked() {
        contextMenu!.CloseContextMenu();
        bool confirm = await dialogService.ConfirmAsync($"Are you sure you wanna delete {SelectedEmployee.Name}?", "Confirm Delete");
        if (!confirm) return;

        var response = await employeeService.DeleteById(SelectedEmployee.Id, Constants.EmployeeBaseUrl);
        var result = await DisplayMessage(response.Flag, response.Message);
        if (result) {
            SelectedEmployee = new();
            await LoadEmployees();
        }
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Success Operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert");
            return false;
        }
    }

    public void Dispose() => allState.Action -= StateHasChanged;
}
